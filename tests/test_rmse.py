
from automap.rmse import polynomial, optimal_rmse

import math
import itertools
from random import randrange, uniform

tiepoints = [((666, 462), (-0.1432736, 12.9763066)), ((555, 714), (-0.8494577, 10.7856466)), ((589, 766), (-0.792123, 10.471497)), ((673, 68), (-0.0412392, 16.2788129)), ((951, 105), (2.4, 15.9167)), ((529, 124), (-1.3094536, 15.8179118)), ((580, 314), (-0.8634114, 14.2290396)), ((848, 311), (1.4546006, 14.2090125)), ((150, 349), (-4.5548581, 13.9051631)), ((925, 392), (2.109823, 13.524834)), ((399, 393), (-2.417699, 13.580982)), ((451, 408), (-1.9643503, 13.4387993)), ((322, 453), (-2.96218104391892, 13.2311675)), ((615, 501), (-0.5730914, 12.6626565)), ((42, 529), (-5.4600937, 12.3869501)), ((276, 522), (-3.457987, 12.4617)), ((395, 544), (-2.4696282, 12.3186862)), ((727, 560), (0.3814973, 12.0556339)), ((338, 609), (-2.9300274, 11.7447567)), ((436, 689), (-2.1047639, 11.0971341)), ((299, 706), (-3.2487858, 10.9650701)), ((654, 693), (-0.2422876, 11.0607602)), ((709, 715), (0.2043122, 10.8595454)), ((271, 770), (-3.1795681, 10.3303342)), ((848, 781), (1.38354098638007, 10.2514083)), ((883, 853), (1.7983498633298, 9.7023099)), ((684, 889), (-0.0035068, 9.4466478)), ((327, 910), (-2.996958, 9.2729913)), ((584, 893), (-0.8430289, 9.4043366)), ((779, 909), (0.771803102203781, 9.2501955)), ((822, 941), (1.47346418069025, 8.8294049)), ((389, 939), (-2.4895105, 9.0324846)), ((305, 987), (-3.193984, 8.69055)), ((623, 996), (-0.519653, 8.550609)), ((442, 1046), (-2.032516, 8.164004)), ((74, 1043), (-5.1076732, 8.1390703)), ((325, 1058), (-2.7984258, 8.0397992)), ((665, 1091), (-0.173284, 7.777908)), ((82, 1099), (-5.0305106, 7.6852414)), ((376, 1131), (-2.5824981, 7.450473))]
#tiepoints = [((666, 462), (-0.1432736, 12.9763066)), ((615, 501), (-0.5730914, 12.6626565)), ((555, 714), (-0.8494577, 10.7856466)), ((673, 68), (-0.0412392, 16.2788129)), ((951, 105), (2.4, 15.9167)), ((529, 124), (-1.3094536, 15.8179118)), ((580, 314), (-0.8634114, 14.2290396)), ((848, 311), (1.4546006, 14.2090125)), ((150, 349), (-4.5548581, 13.9051631)), ((925, 392), (2.109823, 13.524834)), ((399, 393), (-2.417699, 13.580982)), ((372, 412), (-2.1299373, 11.4488854)), ((451, 408), (-1.9643503, 13.4387993)), ((322, 453), (-3.0695369, 13.0690536)), ((42, 529), (-5.4689427, 12.3854826)), ((276, 522), (-3.457987, 12.4617)), ((738, 543), (2.2177249, 13.7432434)), ((395, 544), (-2.4696282, 12.3186862)), ((727, 560), (0.3814973, 12.0556339)), ((338, 609), (-2.93142667642253, 11.7198717)), ((436, 689), (-2.1047639, 11.0971341)), ((299, 706), (-3.2487858, 10.9650701)), ((654, 693), (-0.2422876, 11.0607602)), ((709, 715), (0.2043122, 10.8595454)), ((271, 770), (-3.1795681, 10.3303342)), ((589, 766), (-0.792123, 10.471497)), ((848, 781), (1.38354098638007, 10.2514083)), ((883, 853), (1.7983498633298, 9.7023099)), ((684, 889), (-0.0035068, 9.4466478)), ((327, 910), (-2.996958, 9.2729913)), ((584, 893), (-0.8430289, 9.4043366)), ((779, 909), (0.771803102203781, 9.2501955)), ((822, 941), (1.47346418069025, 8.8294049)), ((389, 939), (-2.4895105, 9.0324846)), ((305, 987), (-3.193984, 8.69055)), ((623, 996), (-0.519653, 8.550609)), ((442, 1046), (-2.032516, 8.164004)), ((74, 1043), (-5.1076732, 8.1390703)), ((325, 1058), (-2.7984258, 8.0397992)), ((665, 1091), (-0.173284, 7.777908)), ((82, 1099), (-5.0305106, 7.6852414)), ((376, 1131), (-2.5824981, 7.450473))]
#tiepoints = [((652, 500), (-0.5730914, 12.6626565)), ((560, 727), (-0.8481471, 10.7862304)), ((555, 118), (-1.3094536, 15.8179118)), ((538, 301), (-0.8634114, 14.2290396)), ((862, 293), (1.34483726708075, 14.51575)), ((939, 389), (2.109823, 13.524834)), ((393, 399), (-2.417699, 13.580982)), ((371, 413), (-2.1299373, 11.4488854)), ((305, 554), (-3.457987, 12.4617)), ((714, 555), (0.3593297, 12.0570943)), ((314, 580), (-2.9300274, 11.7447567)), ((715, 709), (0.2043122, 10.8595454)), ((582, 757), (-0.792123, 10.471497)), ((909, 779), (1.3808554, 10.3051511)), ((937, 855), (1.7983498633298, 9.7023099)), ((326, 905), (-2.996958, 9.2729913)), ((567, 893), (-0.8430289, 9.4043366)), ((827, 890), (0.771803102203781, 9.2501955)), ((828, 931), (1.47346418069025, 8.8294049)), ((392, 925), (-2.4895105, 9.0324846))]
#tiepoints = [((825, 248), (4.3741556, 50.8273969)), ((175, 386), (-78.19266935, 38.91780805)), ((793, 273), (12.4194005, 51.3198732)), ((193, 298), (-84.7759206, 45.4409068)), ((756, 321), (7.7298863, 47.2271068)), ((730, 360), (-7.0908071, 40.0887823)), ((181, 421), (-81.3785736462791, 28.5438252)), ((531, 426), (-5.4529725, 37.1297738)), ((493, 676), (-48.6877197, -7.9184092)), ((516, 656), (-36.5104005, -8.6805706))]
#tiepoints = [((1822, 189), (3.1497066, 10.3562444)), ((1230, 279), (2.6675063, 10.2242175)), ((801, 529), (2.4016564, 10.1130036)), ((1878, 385), (3.1367518, 10.2148628)), ((1268, 892), (2.7197361, 9.8623372)), ((1102, 1569), (2.6278258, 9.3400159)), ((1064, 1903), (2.5581705, 9.1239828)), ((120, 1917), (1.9370867, 9.1014312))]
#tiepoints = [((103, 303), (74.6069949, 42.8767446)), ((667, 409), (109.8344586, 40.6549157)), ((872, 613), (120.2052342, 30.2489634)), ((532, 65), (101.6334907, 56.1517085)), ((288, 108), (83.7784496, 53.347402)), ((315, 239), (87.236938, 48.367198)), ((611, 253), (106.8841356, 47.908056)), ((310, 324), (87.4734528, 43.9089751)), ((280, 364), (85.716234, 41.673238)), ((108, 379), (81.934722, 43.654499)), ((866, 416), (119.685798, 25.640307)), ((958, 429), (126.9782914, 37.5666791)), ((717, 465), (112.015927, 38.57535)), ((852, 481), (120.307621, 36.0638789)), ((1006, 471), (129.0752365, 35.1799528)), ((532, 500), (111.072678, 38.375756)), ((794, 481), (132.5624807, 32.9603698)), ((412, 499), (94.9058232, 36.3824917)), ((566, 514), (103.8485056, 36.034178)), ((841, 517), (119.1695305, 34.6092633)), ((886, 583), (121.4888922, 31.2253441)), ((70, 614), (77.1716954, 28.6273928)), ((76, 645), (78.0098161, 27.1752554)), ((332, 638), (91.1330128, 29.6554138)), ((574, 628), (104.0612783, 30.6765553)), ((305, 679), (85.3247485995495, 27.70991355)), ((744, 671), (112.68587, 22.377393)), ((798, 653), (120.539722, 23.6175)), ((871, 701), (121.742379, 24.718467)), ((297, 713), (101.734546, 20.617487)), ((914, 717), (121.5636796, 25.0375198)), ((548, 749), (102.720308993809, 25.01800865)), ((760, 779), (113.2592945, 23.1301964)), ((613, 836), (121.1361035, 14.5526555)), ((705, 858), (110.3409936, 20.0423626)), ((935, 874), (120.9779383, 14.605903)), ((195, 914), (80.3400485, 7.4958611)), ((710, 897), (121.898421843722, 10.5359343)), ((651, 935), (107.581697184886, 16.4545887)), ((949, 942), (120.9799696, 14.5906216)), ((225, 976), (76.2523304, 9.9627815))]

frompoints,topoints = zip(*tiepoints)

##off = 1
##frompoints = [(randrange(-180,180),randrange(-90,90)) for _ in range(15)]
###topoints = [(x,y) for x,y in frompoints]
###topoints = [(x+off,y+off) for x,y in frompoints]
##topoints = [(x+uniform(-off,off),y+uniform(-off,off)) if uniform(0,1)>0.8 else (x,y) for x,y in frompoints]



print 'TIEPOINTS'
for fp,tp in zip(frompoints, topoints):
    print fp, '--->', tp
    

##topoints_trans = polynomial(1, fromxs, fromys, toxs, toys)
##
##
##residuals = [(abs(x-xtrans),abs(y-ytrans)) for (x,y),(xtrans,ytrans) in zip(topoints, topoints_trans)]
##residuals = [math.hypot(xerr,yerr) for xerr,yerr in residuals]
##rmse = sum(residuals) / float(len(residuals))
##
##
##print 'RMSE:', rmse


# view details
def test_details(order, frompoints, topoints):
    res_x, res_y, res_xy, rmse, rmse_x, rmse_y, pred_x, pred_y = polynomial(1, frompoints, topoints)
    pred_xy = zip(pred_x, pred_y)

    print '\n' + 'PREDICTIONS (RMSE: %s)' % rmse
    for p,ppred,rs in zip(topoints, pred_xy, res_xy):
        print p, '--->', ppred
        print 'Residual: %s' % rs

def test_optimal_rmse(order, frompoints, topoints):
    rmse, frompoints_new, topoints_new, residuals = optimal_rmse(order, frompoints, topoints)
    print '\n' + 'OPTIMAL RMSE: %s' % rmse
    for fp,tp,rs in zip(frompoints_new, topoints_new, residuals):
        print fp, '--->', tp
        print 'Residual:', rs

    print '\n' + 'DROPPED TIEPOINTS'
    for fp,tp in zip(frompoints, topoints):
        if fp not in frompoints_new:
            print fp, '--->', tp


if __name__ == '__main__':
    test_optimal_rmse(3, frompoints, topoints)
        
        



